// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: client/auth.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Autharization_HealthCheck_FullMethodName         = "/pb.Autharization/HealthCheck"
	Autharization_GetUserDetails_FullMethodName      = "/pb.Autharization/GetUserDetails"
	Autharization_GetOnlineStatus_FullMethodName     = "/pb.Autharization/GetOnlineStatus"
	Autharization_UserGroupPermission_FullMethodName = "/pb.Autharization/UserGroupPermission"
)

// AutharizationClient is the client API for Autharization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutharizationClient interface {
	HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	GetOnlineStatus(ctx context.Context, in *GetOnlineStatusRequest, opts ...grpc.CallOption) (*GetOnlineStatusResponse, error)
	UserGroupPermission(ctx context.Context, in *UserGroupPermissionRequest, opts ...grpc.CallOption) (*UserGroupPermissionResponse, error)
}

type autharizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAutharizationClient(cc grpc.ClientConnInterface) AutharizationClient {
	return &autharizationClient{cc}
}

func (c *autharizationClient) HealthCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Autharization_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, Autharization_GetUserDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusRequest, opts ...grpc.CallOption) (*GetOnlineStatusResponse, error) {
	out := new(GetOnlineStatusResponse)
	err := c.cc.Invoke(ctx, Autharization_GetOnlineStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) UserGroupPermission(ctx context.Context, in *UserGroupPermissionRequest, opts ...grpc.CallOption) (*UserGroupPermissionResponse, error) {
	out := new(UserGroupPermissionResponse)
	err := c.cc.Invoke(ctx, Autharization_UserGroupPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutharizationServer is the server API for Autharization service.
// All implementations must embed UnimplementedAutharizationServer
// for forward compatibility
type AutharizationServer interface {
	HealthCheck(context.Context, *Request) (*Response, error)
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	GetOnlineStatus(context.Context, *GetOnlineStatusRequest) (*GetOnlineStatusResponse, error)
	UserGroupPermission(context.Context, *UserGroupPermissionRequest) (*UserGroupPermissionResponse, error)
	mustEmbedUnimplementedAutharizationServer()
}

// UnimplementedAutharizationServer must be embedded to have forward compatible implementations.
type UnimplementedAutharizationServer struct {
}

func (UnimplementedAutharizationServer) HealthCheck(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAutharizationServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedAutharizationServer) GetOnlineStatus(context.Context, *GetOnlineStatusRequest) (*GetOnlineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineStatus not implemented")
}
func (UnimplementedAutharizationServer) UserGroupPermission(context.Context, *UserGroupPermissionRequest) (*UserGroupPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroupPermission not implemented")
}
func (UnimplementedAutharizationServer) mustEmbedUnimplementedAutharizationServer() {}

// UnsafeAutharizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutharizationServer will
// result in compilation errors.
type UnsafeAutharizationServer interface {
	mustEmbedUnimplementedAutharizationServer()
}

func RegisterAutharizationServer(s grpc.ServiceRegistrar, srv AutharizationServer) {
	s.RegisterService(&Autharization_ServiceDesc, srv)
}

func _Autharization_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).HealthCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetOnlineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetOnlineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetOnlineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetOnlineStatus(ctx, req.(*GetOnlineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_UserGroupPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).UserGroupPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_UserGroupPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).UserGroupPermission(ctx, req.(*UserGroupPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Autharization_ServiceDesc is the grpc.ServiceDesc for Autharization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autharization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Autharization",
	HandlerType: (*AutharizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Autharization_HealthCheck_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Autharization_GetUserDetails_Handler,
		},
		{
			MethodName: "GetOnlineStatus",
			Handler:    _Autharization_GetOnlineStatus_Handler,
		},
		{
			MethodName: "UserGroupPermission",
			Handler:    _Autharization_UserGroupPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/auth.proto",
}
